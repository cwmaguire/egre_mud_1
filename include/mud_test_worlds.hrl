-include("mud_rules.hrl").

-define(TEST_CONN_RULES, {rules, [rules_handler_test_connection_attack,
                                  ?UNIVERSAL_RULES]}).

-define(WORLD_1, [{room_nw,
                   [{exit, exit_ns},
                    {exit, exit_ew},
                    {visitor, player},
                    {icon, room},
                    ?ROOM_RULES]},

                  {room_s,
                   [{exit, exit_ns},
                    {icon, room},
                    ?ROOM_RULES]},

                  {room_e,
                   [{exit, exit_ew},
                    {icon, room},
                    ?ROOM_RULES]},

                  {player,
                   [{owner, room_nw},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {exit_ns,
                   [{{room, n}, room_nw},
                    {{room, s}, room_s},
                    {icon, exit},
                    ?EXIT_RULES]},

                  {exit_ew,
                   [{{room, w}, room_nw},
                    {{room, e}, room_e},
                    {is_locked, true},
                    {icon, exit},
                    ?EXIT_RULES]}]).

-define(WORLD_2, [{room,
                   [{visitor, player},
                    {item, sword},
                    {item, apple},
                    {icon, room},
                    ?ROOM_RULES]},

                  {player,
                   [{owner, room},
                    {item, helmet},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {sword,
                   [{owner, room},
                    {name, <<"sword">>},
                    {icon, weapon},
                    ?ITEM_RULES]},

                  {helmet,
                   [{owner, player},
                    {name, <<"helmet">>},
                    {icon, armor},
                    ?ITEM_RULES]},

                  {apple,
                   [{owner, room},
                    {name, <<"apple">>},
                    {icon, food},
                    ?ITEM_RULES]}]).

-define(WORLD_3, [{room,
                   [{visitor, player},
                    {visitor, zombie},
                    {icon, room},
                    ?ROOM_RULES]},

                  {player,
                   [{owner, room},
                    {hitpoints, p_hp},
                    {life, p_life},
                    {attribute, dexterity0},
                    {attack_types, [melee]},
                    %% TODO: why is stamina a first class property
                    %% instead of just an attribute?
                    %% It might not matter what the index of the property
                    %% is if we don't look them up by index
                    {resource, p_stamina},
                    {body_part, p_hand_right},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  ?hp(p_hp, player, 1000, []),
                  ?life(p_life, player, []),
                  ?attribute(dexterity0, 1, 99, 0, 0, player, []),
                  ?resource(p_stamina, player, stamina, 1, 100, 10, []),
                  ?hand(p_hand_right, player, <<"right_hand">>,
                        [{item, p_fist_right},
                         {max_items, 1}]),

                  {p_fist_right,
                   [{name, <<"right fist">>},
                    {owner, p_hand_right},
                    {character, player},
                    {wielding_body_parts, [hand]},
                    {body_part, {?PID(p_hand_right), hand}},
                    {is_attack, true},
                    {is_defence, false},
                    {should_attack_module, mud_attack_melee},
                    {should_defend_module, mud_defence_melee},
                    {effect_prototype, p_fist_melee_effect_prototype},
                    {attack_type, melee},
                    {resources, [{stamina, 5}]},
                    {icon, weapon},
                    ?WEAPON_RULES]},

                  {p_fist_melee_effect_prototype,
                   [{owner, p_fist_right},
                    {character, player},
                    {type, blunt_force},
                    {lifecycle, once},
                    {hit_roll, {1, 10}},
                    {effect_roll, 10},
                    {child_rules, ?EFFECT_RULES}, %% e.g. {child_rules, {rules, [...]}}
                    ?EFFECT_PROTOTYPE_RULES]},

                  {zombie,
                   [{owner, room},
                    {attack_wait, 10},
                    {name, <<"zombie">>},
                    {hitpoints, z_hp},
                    {life, z_life},
                    {attribute, z_dex},
                    {body_part, z_hand},
                    %% TODO Do something with this
                    %% "melee" can even be an attack command that's
                    %% more specific than just attack:
                    %% "spell zombie"
                    %% "melee zombie"
                    %% "shoot zombie"
                    {attack_types, [melee]},
                    {stamina, z_stamina},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  ?hp(z_hp, zombie, 10, []),
                  ?life(z_life, zombie, []),
                  ?attribute(z_dex, 1, 0, 0, 0, zombie, []),
                  ?resource(z_stamina, zombie, stamina, 1, 500, 10, []),
                  ?hand(z_hand, zombie, <<"left hand">>,
                        [{item, sword}, {max_items, 1}]),

                  {sword,
                   [{attack_damage_modifier, 5},
                    {owner, z_hand},
                    {character, zombie},
                    {is_attack, true},
                    {is_auto_attack, true},
                    {resources, [{stamina, 5}]},
                    {wielding_body_parts, [hand]},
                    {body_part, {?PID(z_hand), hand}},
                    {icon, weapon},
                    {drop_on_death, true},
                    ?ITEM_RULES]}]).

-define(WORLD_RESOURCE_WAIT,
                 [{room,
                   [{visitor, player},
                    {visitor, zombie},
                    {icon, room},
                    ?ROOM_RULES]},

                  {player,
                   [{owner, room},
                    {hitpoints, p_hp},
                    {life, p_life},
                    {attribute, p_dex},
                    {attack_types, [melee]},
                    %% TODO: why is stamina a first class property
                    %% instead of just an attribute?
                    %% It might not matter what the index of the property
                    %% is if we don't look them up by index
                    {resource, p_stamina},
                    {body_part, p_hand_right},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  ?hp(p_hp, player, 1000, []),
                  ?life(p_life, player, []),
                  ?attribute(p_dex, 1, 99, 0, 0, player, []),
                  ?resource(p_stamina, player, stamina, 1, 100, 10, []),
                  ?hand(p_hand_right, player, <<"right_hand">>,
                        [{item, p_fist_right}, {max_items, 1}]),

                  {p_fist_right,
                   [{name, <<"right fist">>},
                    {owner, p_hand_right},
                    {character, player},
                    {wielding_body_parts, [hand]},
                    {body_part, {?PID(p_hand_right), hand}},
                    {is_attack, true},
                    {is_defence, false},
                    {should_attack_module, mud_attack_melee},
                    {should_defend_module, mud_defence_melee},
                    {effect_prototype, p_fist_melee_effect_prototype},
                    {attack_type, melee},
                    {resources, [{stamina, 5}]},
                    {icon, weapon},
                    ?WEAPON_RULES]},

                  {p_fist_melee_effect_prototype,
                   [{owner, p_fist_right},
                    {character, player},
                    {type, blunt_force},
                    {lifecycle, once},
                    {hit_roll, {1, 9}},
                    {effect_roll, 10},
                    {child_rules, ?EFFECT_RULES}, %% e.g. {child_rules, {rules, [...]}}
                    ?EFFECT_PROTOTYPE_RULES]},

                  {zombie,
                   [{owner, room},
                    {attack_wait, 10},
                    {name, <<"zombie">>},
                    {hitpoints, z_hp},
                    {life, z_life},
                    {attribute, z_dex},
                    {body_part, z_hand},
                    %% TODO Do something with this
                    %% "melee" can even be an attack command that's
                    %% more specific than just attack:
                    %% "spell zombie"
                    %% "melee zombie"
                    %% "shoot zombie"
                    {attack_types, [melee]},
                    {stamina, z_stamina},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  ?hp(z_hp, zombie, 10, []),
                  ?life(z_life, zombie, []),
                  ?attribute(z_dex, 1, 0, 0, 0, zombie, []),
                  ?resource(z_stamina, zombie, stamina, 1, 500, 10, []),
                  ?hand(z_left_hand, zombie, <<"left hand">>,
                        [{item, sword}, {max_items, 1}]),

                  {sword,
                   [{attack_damage_modifier, 5},
                    {owner, z_hand},
                    % I don't think an item is supposed to know what its character is
                    %{character, zombie},
                    {is_attack, true},
                    {is_auto_attack, true},
                    {resources, [{stamina, 5}]},
                    {wielding_body_parts, [hand]},
                    {body_part, {?PID(z_hand), hand}},
                    {icon, weapon},
                    {drop_on_death, true},
                    ?ITEM_RULES]}]).

-define(WORLD_4, [{room,
                   [{visitor, player},
                    ?ROOM_RULES]},

                  {player,
                   [{owner, room},
                    {item, helmet},
                    {body_part, head1},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {head1,
                   [{name, <<"head">>},
                    {body_part, head},
                    {owner, player},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {helmet,
                   [{name, <<"helmet">>},
                    {owner, player},
                    {character, player},
                    {attribute, dex_buff},
                    {body_parts, [head]},
                    {icon, armor},
                    ?ITEM_RULES]},

                  ?attribute(dex_buff, 0, 0, 0, 0, helmet, [{name, <<"dex_buff">>}])]).

-define(WORLD_5, [{player,
                   [{item, helmet},
                    {body_part, head1},
                    {body_part, finger1},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {head1,
                   [{name, <<"head">>},
                    {owner, player},
                    {body_part, head},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {finger1,
                   [{name, <<"finger">>},
                    {owner, player},
                    {body_part, finger},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {helmet,
                   [{owner, player},
                    {name, <<"helmet">>},
                    {body_parts, [head, hand]},
                    {icon, armor},
                    ?ITEM_RULES]}]).

-define(WORLD_6, [{player,
                   [{body_part, finger1},
                    {body_part, finger2},
                    {item, ring1},
                    {item, ring2},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {finger1,
                   [{name, <<"finger1">>},
                    {owner, player},
                    {max_items, 1},
                    {body_part, finger},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {finger2,
                   [{name, <<"finger2">>},
                    {owner, player},
                    {max_items, 1},
                    {body_part, finger},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {ring1,
                   [{owner, player},
                    {name, <<"ring1">>},
                    {body_parts, [finger]},
                    {icon, clothing},
                    ?ITEM_RULES]},

                  {ring2,
                   [{owner, player},
                    {name, <<"ring2">>},
                    {body_parts, [finger]},
                    {icon, clothing},
                    ?ITEM_RULES]}]).

-define(WORLD_7, [{room,
                   [{visitor, player},
                    {visitor, giant},
                    {name, <<"room">>},
                    {desc, <<"an empty space">>},
                    {item, bread},
                    {icon, room},
                    ?ROOM_RULES]},

                  {player,
                   [{name, <<"Bob">>},
                    {owner, room},
                    {attribute, height0},
                    {attribute, weight0},
                    {attribute, gender0},
                    {attribute, race0},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {height0,
                   [{owner, player},
                    {type, height},
                    {value, <<"2.2">>},
                    %% XXX I don't think this is used anymore: I have desc templates in mud.app.src
                    {desc, [value, <<"m tall">>]},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {weight0,
                   [{owner, player},
                    {type, weight},
                    {value, <<"128">>},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {gender0,
                   [{owner, player},
                    {type, gender},
                    {value, <<"female">>},
                    {desc, [value]},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {race0,
                   [{owner, player},
                    {type, race},
                    {value, <<"human">>},
                    {desc, [value]},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {giant,
                   [{owner, room},
                    {name, <<"Pete">>},
                    {item, pants},
                    {item, sword},
                    {item, scroll},
                    {body_part, legs0},
                    {body_part, hands0},
                    {attribute, height1},
                    {attribute, weight1},
                    {attribute, gender1},
                    {attribute, race1},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {height1,
                   [{owner, giant},
                    {type, height},
                    {value, <<"4.0">>},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {weight1,
                   [{owner, giant},
                    {type, weight},
                    {value, <<"400.0">>},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {gender1,
                   [{owner, giant},
                    {type, gender},
                    {value, <<"male">>},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {race1,
                   [{owner, giant},
                    {type, race},
                    {value, <<"giant">>},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]},

                  {legs0, %% if we name this 'legs' then 'legs' will be known as
                   %% as an object ID. If 'legs' is an object identifier
                   %% then a {body_part, legs} property on a body_part,
                   %% i.e. the type of the body part, will be changed
                   %% into {body_part, <PID OF LEGS OBJECT>}
                   [{name, <<"legs">>},
                    {owner, giant},
                    {max_items, 1},
                    {body_part, legs},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {hands0,
                   [{name, <<"hands">>},
                    {owner, giant},
                    {max_items, 1},
                    {body_part, hands},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  {pants,
                   [{owner, giant},
                    {body_parts, [legs]},
                    {name, <<"pants_">>},
                    {desc, <<"pants">>},
                    {icon, clothing},
                    ?ITEM_RULES]},

                  {sword,
                   [{owner, giant},
                    {body_parts, [hands]},
                    {name, <<"sword_">>},
                    {desc, <<"sword">>},
                    {icon, weapon},
                    ?ITEM_RULES]},

                  {scroll,
                   [{owner, giant},
                    {body_parts, []},
                    {name, <<"scroll_">>},
                    {desc, <<"scroll">>},
                    {icon, book},
                    ?ITEM_RULES]},

                  {shoes,
                   [{owner, giant},
                    {body_parts, [feet]},
                    {name, <<"shoes_">>},
                    {desc, <<"shoes">>},
                    {icon, clothing},
                    ?ITEM_RULES]},

                  {bread,
                   [{owner, room},
                    {name, <<"bread_">>},
                    {desc, <<"a loaf of bread">>},
                    {icon, food},
                    ?ITEM_RULES]}
                 ]).

-define(WORLD_8, [{room1,
                   [{is_room, true},
                    {visitor, giant},
                    {visitor, player},
                    {item, shield},
                    {item, force_field},
                    {name, <<"room">>},
                    {desc, <<"an empty space">>},
                    {exit, exit_1_2},
                    {icon, room},
                    ?ROOM_RULES]},

                  {room2,
                   [{exit, exit_1_2},
                    {icon, room},
                    ?ROOM_RULES]},

                  {exit_1_2,
                   [{{room, r1}, room1},
                    {{room, r2}, room2},
                    {icon, exit},
                    ?EXIT_RULES]},

                  {player,
                   [{name, <<"Bob">>},
                    {owner, room1},
                    {room, room1},
                    {hitpoints, p_hp},
                    {life, p_life},
                    {attribute, strength0},
                    {attribute, dexterity0},
                    {stamina, p_stamina},
                    {body_part, p_back},
                    {body_part, hand0},
                    {body_part, hand1},
                    {race, race0},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  ?hp(p_hp, player, 10, []),
                  ?life(p_life, player, []),
                  ?attribute(strength0, 0, 0, 100, 0, player, [{type, strength}, {value, 17}]),
                  ?attribute(dexterity0, 100, 0, 0, 0, player, [{type, dexterity}, {value, 15}]),
                  ?resource(p_stamina, player, stamina, 1, 10, 10, []),
                  ?hand(hand0, player, <<"left hand">>, [{max_items, 1}, {item, p_fist}]),
                  ?hand(hand1, player, <<"right hand">>, [{max_items, 1}]),

                  {force_field,
                   [{owner, room1},
                    {body_parts, [back]},
                    {wielding_body_parts, [back]},
                    {name, <<"force field">>},
                    {desc, [name]},
                    {defence_damage_modifier, 100},
                    {is_defence, true},
                    {icon, technology},
                    ?ITEM_RULES]},

                  {shield,
                   [{owner, room1},
                    {body_parts, [hand]},
                    {wielding_body_parts, [hand]},
                    {name, <<"shield">>},
                    {desc, [name]},
                    {defence_hit_modifier, 100},
                    {is_defence, true},
                    {icon, armor},
                    ?ITEM_RULES]},

                  {p_fist,
                   [{name, <<"left fist">>},
                    {owner, hand0},
                    {character, player},
                    {wielding_body_parts, [hand]},
                    {body_part, {?PID(hand0), hand}},
                    {is_attack, true},
                    {is_defence, false},
                    {is_auto_attack, true},
                    {should_attack_module, mud_attack_melee},
                    {should_defend_module, mud_defence_melee},
                    {effect_prototype, p_fist_melee_effect_prototype},
                    {resources, [{stamina, 5}]},
                    {icon, weapon},
                    ?WEAPON_RULES]},

                  {p_fist_melee_effect_prototype,
                   [{owner, p_fist},
                    {character, player},
                    {type, blunt_force},
                    {lifecycle, once},
                    {hit_roll, {1, 10}},
                    {effect_roll, 30},
                    {child_rules, ?EFFECT_RULES}, %% e.g. {child_rules, {rules, [...]}}
                    ?EFFECT_PROTOTYPE_RULES]},

                  {p_back,
                   [{name, <<"back">>},
                    {owner, player},
                    {body_part, back},
                    {max_items, 2},
                    {icon, body_part},
                    ?BODY_PART_RULES]},

                  ?attribute(race0, 0, 0, 50, 0, player, [{type, race}]),

                  {giant,
                   [{owner, room1},
                    {name, <<"Pete">>},
                    {hitpoints, g_hp},
                    {life, g_life},
                    {body_part, g_hand_r},
                    {attribute, strength1},
                    {attribute, dexterity1},
                    {attribute, race1},
                    {stamina, g_stamina},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  ?hp(g_hp, giant, 310, []),
                  ?life(g_life, giant, []),
                  ?hand(g_hand_r, giant, <<"right hand">>, [{item, g_club}]),
                  ?attribute(strength1, 0, 0, 50, 0, giant, [{type, strength}, {value, 17}]),
                  ?attribute(dexterity1, 50, 50, 0, 0, player, [{type, dexterity}, {value, 15}]),
                  ?attribute(race1, 0, 0, 50, 0, giant, [{type, race}]),
                  ?resource(g_stamina, giant, stamina, 1, 10, 10, []),

                  {g_club,
                   [{name, <<"giant club">>},
                    {attack_damage_modifier, 50},
                    {attack_hit_modifier, 5},
                    {owner, g_hand_r},
                    {character, giant},
                    {wielding_body_parts, [hand]},
                    {body_part, {?PID(g_hand_r), hand}},
                    {is_attack, true},
                    {is_defence, false},
                    {is_auto_attack, true},
                    {should_attack_module, mud_attack_melee},
                    {should_defend_module, mud_defence_melee},
                    {effect_prototype, g_glub_melee_effect_prototype},
                    {attack_type, melee},
                    {resources, [{stamina, 5}]},
                    {icon, weapon},
                    ?ITEM_RULES]},

                  {g_club_melee_effect_prototype,
                   [{owner, p_fist},
                    {character, giant},
                    {type, blunt_force},
                    {lifecycle, once},
                    {hit_roll, {1, 10}},
                    {effect_roll, 30},
                    {child_rules, ?EFFECT_RULES}, %% e.g. {child_rules, {rules, [...]}}
                    ?EFFECT_PROTOTYPE_RULES]}
                 ]).

-define(WORLD_9, [{room,
                   [{visitor, dog},
                    {item, collar},
                    {icon, room},
                    ?ROOM_RULES]},

                  {dog,
                   [{owner, room},
                    {icon, person},
                    ?CHARACTER_RULES]},

                  {collar,
                   [{owner, room},
                    {item, transmitter},
                    {icon, clothing},
                    ?ITEM_RULES]},

                  {transmitter,
                   [{owner, collar},
                    {attribute, stealth},
                    {icon, technology},
                    ?ITEM_RULES]},

                  {stealth,
                   [{owner, transmitter},
                    {icon, stat},
                    ?ATTRIBUTE_RULES]} ]).

-define(WORLD_10, [{room,
                    [{visitor, player},
                     {item, rifle},
                     {exit, exit_1_2},
                     {icon, exit},
                     ?ROOM_RULES]},

                   {player,
                    [{owner, room},
                     {icon, person},
                     ?CHARACTER_RULES]},

                   {rifle,
                    [{owner, room},
                     {name, <<"rifle">>},
                     {item, suppressor},
                     {item, grip},
                     {item, clip},
                     {icon, weapon},
                     ?ITEM_RULES]},

                   {suppressor,
                    [{owner, rifle},
                     {name, <<"suppressor">>},
                     {top_item, rifle},
                     {icon, weapon},
                     ?ITEM_RULES]},

                   {grip,
                    [{owner, rifle},
                     {name, <<"grip">>},
                     {top_item, rifle},
                     {icon, weapon},
                     ?ITEM_RULES]},

                   {clip,
                    [{owner, rifle},
                     {name, <<"clip">>},
                     {top_item, rifle},
                     {item, bullet},
                     {icon, weapon},
                     ?ITEM_RULES]},

                   {bullet,
                    [{owner, clip},
                     {name, <<"bullet">>},
                     {top_item, rifle},
                     {icon, ammo},
                     ?ITEM_RULES]} ]).

-define(WORLD_SPELL_ATTACK,
        [{room,
          [{visitor, player},
           {visitor, giant},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{name, <<"bob">>},
           {owner, room},
           {room, room},
           {icon, person},
           {resource, p_mana},
           {spell, fireball_spell},
           ?CHARACTER_RULES]},

         {p_mana,
          [{owner, player},
           {type, mana},
           {per_tick, 1},
           {tick_time, 10},
           {max, 10},
           {icon, resource},
           ?RESOURCE_RULES]},

         {p_hp,
          [{hitpoints, 10},
           {owner, player},
           {icon, stat},
           ?HITPOINTS_RULES]},

         {p_life,
          [{is_alive, true},
           {owner, player},
           {icon, stat},
           ?LIFE_RULES]},

         {fireball_spell,
          [{desc, <<"fireball spell">>},
           {owner, player},
           {character, player},
           {name, <<"fireball">>},
           {attack_type, spell},
           {is_attack, true},
           {is_defence, false},
           {is_auto_attack, true},

           {should_attack_module, mud_attack_spell},
           {should_defend_module, mud_defence_spell},
           {effect_prototype, p_fireball_effect_prototype},

           {resources, [{mana, 5}]},
           {is_memorized, false},
           {icon, spell},
           ?SPELL_RULES]},

         {p_fireball_effect_prototype,
          [{owner, fireball_spell},
           {character, player},

           %% FIXME need to create effect icon?
           {icon, effect},

           {type, fire},

           %% TODO Hmmmm, light them on fire?
           {lifecycle, once},
           {hit_roll, {1, 10}},
           {effect_roll, 10},
           {child_rules, ?EFFECT_RULES},
           ?EFFECT_PROTOTYPE_RULES]},

         {giant,
          [{owner, room},
           {room, room},
           {name, <<"Pete">>},
           {hitpoints, g_hp},
           {life, g_life},
           {resource, g_stamina},
           {icon, person},
           ?CHARACTER_RULES]},

         {g_hp,
          [{hitpoints, 2},
           {owner, giant},
           {icon, stat},
           ?HITPOINTS_RULES]},

         {g_life,
          [{is_alive, true},
           {owner, giant},
           {icon, stat},
           ?LIFE_RULES]},

         {g_foot,
          [{name, <<"left foot">>},
           {attack_damage, 50},
           {attack_hit, 1},
           {owner, giant},
           {character, giant},
           {is_attack, true},
           {is_auto_attack, true},
           {resources, [{stamina, 5}]},
           {icon, body_part},
           ?ITEM_RULES]},

         {g_stamina,
          [{owner, player},
           {type, mana},
           {per_tick, 1},
           {tick_time, 10},
           {max, 10},
           {icon, resource},
           ?RESOURCE_RULES]}]).

-define(WORLD_SPELL_HEAL,
        [{room_n,
          [{exit, exit_ns},
           {visitor, player1},
           {visitor, player2},
           {visitor, player3},
           {icon, room},
           ?ROOM_RULES]},

         {room_s,
          [{exit, exit_ns},
           {visitor, player4},
           {icon, room},
           ?ROOM_RULES]},

         {exit_ns,
          [{{room, n}, room_n},
           {{room, s}, room_s},
           {icon, exit},
           ?EXIT_RULES]},

         {player1,
          [{name, <<"bob">>},
           {owner, room_n},
           {room, room_n},
           {hitpoints, p_hp},
           {icon, person},
           {resource, p_mana},
           {spell, heal_spell},
           ?CHARACTER_RULES]},

         ?resource(p_mana, player1, mana, 1, 10, 10, []),
         ?hp(p_hp, player1, 1, 10, []),
         ?life(p_life, player1, []),

         {heal_spell,
          [{desc, <<"heal spell">>},
           {owner, player1},
           {character, player1},
           {name, <<"heal">>},
           {attack_type, spell},
           {default_target, character},
           {is_attack, false},
           {is_defence, false},
           {is_auto_attack, false},

           {should_attack_module, mud_attack_spell},
           %% XXX no such module
           {should_defend_module, mud_defence_spell},
           {effect_prototype, p_heal_effect_prototype},

           {resources, [{mana, 5}]},
           {is_memorized, false},
           {icon, spell},
           ?SPELL_RULES]},

         {p_heal_effect_prototype,
          [{owner, heal_spell},
           {character, player1},
           {name, <<"heal spell">>},
           %% FIXME need to create effect icon?
           {icon, effect},
           {type, heal},
           {lifecycle, once},
           {hit_roll, {1, 10}},
           {effect_roll, -9},
           {child_rules, ?EFFECT_RULES},
           ?EFFECT_PROTOTYPE_RULES]},

         {player2,
          [{owner, room_n},
           {room, room_n},
           {name, <<"Pete">>},
           {hitpoints, p2_hp},
           {life, p2_life},
           {icon, person},
           ?CHARACTER_RULES]},

         ?hp(p2_hp, player2, 1, 100, []),
         ?life(p2_life, player2, []),

         {player3,
          [{owner, room_n},
           {room, room_n},
           {name, <<"Nancy">>},
           {hitpoints, p3_hp},
           {life, p3_life},
           {icon, person},
           ?CHARACTER_RULES]},

         ?hp(p3_hp, player3, 1, []),
         ?life(p3_life, player3, []),

         {player4,
          [{owner, room_s},
           {room, room_s},
           {name, <<"Charles">>},
           {hitpoints, p4_hp},
           {life, p4_life},
           {icon, person},
           ?CHARACTER_RULES]},

         ?hp(p4_hp, player4, 1, []),
         ?life(p4_life, player4, [])]).

-define(WORLD_RECOVER_HEALTH,
        [{room_n,
          [{visitor, player1},
           {icon, room},
           ?ROOM_RULES]},

         {player1,
          [{name, <<"bob">>},
           {owner, room_n},
           {room, room_n},
           {hitpoints, p_hp},
           {icon, person},
           {resource, p_healing},
           {spell, heal_spell},
           ?CHARACTER_RULES]},

         ?resource(p_healing, player1, healing, 1, 100, 1, []),
         ?hp(p_hp, player1, 5_000, 10_000, []),
         ?life(p_life, player1, [])]).

-define(WORLD_12, [{room,
                    [{visitor, player},
                     {visitor, zombie},
                     {item, bucket},
                     {icon, room},
                     ?ROOM_RULES]},

                   {player,
                    [{owner, room},
                     {icon, person},
                     ?CHARACTER_RULES]},

                   {zombie,
                    [{owner, room},
                     {name, <<"Arlene">>},
                     {life, z_life},
                     {body_part, z_hand_left},
                     {body_part, z_hand_right},
                     {item, coin},
                     {item, book},
                     {icon, person},
                     ?CHARACTER_RULES]},

                   {z_hand_left,
                    [{owner, zombie},
                     {item, sword},
                     {icon, person},
                     ?BODY_PART_RULES]},

                   {z_hand_right,
                    [{owner, zombie},
                     {item, shield},
                     {icon, person},
                     ?BODY_PART_RULES]},

                   {coin,
                    [{owner, zombie},
                     {icon, item},
                     {name, <<"coin name">>},
                     {desc, <<"coin desc">>},
                     {drop_on_death, true},
                     ?ITEM_RULES]},

                   {bucket,
                    [{owner, room},
                     {icon, item},
                     {name, <<"bucket name">>},
                     {desc, <<"bucket desc">>},
                     {drop_on_death, true},
                     ?ITEM_RULES]},

                   {book,
                    [{owner, zombie},
                     {icon, book},
                     {name, <<"book name">>},
                     {desc, <<"book desc">>},
                     {drop_on_death, true},
                     ?ITEM_RULES]},

                   {sword,
                    [{owner, z_hand_left},
                     {icon, weapon},
                     {name, <<"sword name">>},
                     {desc, <<"sword desc">>},
                     {drop_on_death, true},
                     ?ITEM_RULES]},

                   {shield,
                    [{owner, z_hand_right},
                     {icon, weapon},
                     {name, <<"shield name">>},
                     {desc, <<"shield desc">>},
                     {drop_on_death, true},
                     ?ITEM_RULES]}]).

-define(WORLD_SAY,
        [{room_n,
          [{exit, exit_s},
           {visitor, player},
           {visitor, player2},
           {icon, room},
           {name, <<"room n">>},
           {desc, <<"room n">>},
           ?ROOM_RULES]},

         {room_s,
          [{exit, exit_n},
           {visitor, player3},
           {icon, room},
           {name, <<"room s">>},
           {desc, <<"room s">>},
           ?ROOM_RULES]},

         {player,
          [{owner, room_n},
           {icon, person},
           {name, <<"Reginald">>},
           ?CHARACTER_RULES]},

         {player2,
          [{owner, room_n},
           {icon, person},
           {name, <<"Archie">>},
           ?CHARACTER_RULES]},

         {player3,
          [{owner, room_s},
           {icon, person},
           {name, <<"Jughead">>},
           ?CHARACTER_RULES]},

         {exit_ns,
          [{{room, n}, room_n},
           {{room, s}, room_s},
           {icon, exit},
           ?EXIT_RULES]}
         ]).

-define(WORLD_SHOUT,
        [{living_room,
          [{exit, exit_living_room_kitchen},
           {visitor, player},
           {visitor, player2},
           {icon, room},
           {name, <<"Living room">>},
           {desc, <<"Unliving room of undead">>},
           ?ROOM_RULES]},

         {kitchen,
          [{exit, exit_living_room_kitchen},
           {exit, exit_kitchen_bathroom},
           {visitor, player3},
           {icon, room},
           {name, <<"kitchen">>},
           {desc, <<"blood-spattered kitchen">>},
           ?ROOM_RULES]},

         {bathroom,
          [{exit, exit_kitchen_bathroom},
           {visitor, player4},
           {icon, room},
           {name, <<"bathroom">>},
           {desc, <<"filthy bathroom">>},
           ?ROOM_RULES]},

         {player,
          [{owner, living_room},
           {icon, person},
           {name, <<"Reginald">>},
           ?CHARACTER_RULES]},

         {player2,
          [{owner, living_room},
           {icon, person},
           {name, <<"Archie">>},
           ?CHARACTER_RULES]},

         {player3,
          [{owner, kitchen},
           {icon, person},
           {name, <<"Jughead">>},
           ?CHARACTER_RULES]},

         {player4,
          [{owner, bathroom},
           {icon, person},
           {name, <<"Moose">>},
           ?CHARACTER_RULES]},

         {exit_living_room_kitchen,
          [{{room, living_room}, living_room},
           {{room, kitchen}, kitchen},
           {icon, exit},
           ?EXIT_RULES]},

         {exit_kitchen_bathroom,
          [{{room, kitchen}, kitchen},
           {{room, bathroom}, bathroom},
           {icon, exit},
           ?EXIT_RULES]}
         ]).

-define(WORLD_EXP_FROM_KILL,
        [{room,
          [{visitor, player},
           {visitor, rat},
           {visitor, big_rat},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {hitpoints, p_hp},
           {life, p_life},
           {attack_types, [melee]},
           {resource, p_stamina},
           {attribute, p_dexterity},
           {body_part, p_hand_right},
           {exp, p_exp},
           {icon, person},
           ?CHARACTER_RULES]},

         {p_exp,
          [{owner, player},
           {gained, 0},
           {gives, 0},
           ?EXPERIENCE_RULES]},

         {p_hp,
          [{hitpoints, 1000},
           {owner, player},
           {icon, stat},
           ?HITPOINTS_RULES]},

         {p_life,
          [{is_alive, true},
           {owner, player},
           {icon, stat},
           ?LIFE_RULES]},

         {p_hand_right,
          [{name, <<"right hand">>},
           {item, p_fist_right},
           {owner, player},
           {max_items, 1},
           {body_part, hand},
           {icon, body_part},
           ?BODY_PART_RULES]},

         {p_fist_right,
          [{name, <<"right fist">>},
           {owner, p_hand_right},
           {character, player},
           {type, fist},
           {wielding_body_parts, [hand]},
           {body_part, {?PID(p_hand_right), hand}},
           {is_attack, true},
           {is_defence, false},
           {should_attack_module, mud_attack_melee},
           {should_defend_module, mud_defence_melee},
           {effect_prototype, p_fist_melee_effect_prototype},
           {attack_type, melee},
           {resources, [{stamina, 5}]},
           {icon, weapon},
           ?WEAPON_RULES]},

         {p_fist_melee_effect_prototype,
          [{owner, p_fist_right},
           {character, player},
           {type, blunt_force},
           {lifecycle, once},
           {hit_roll, {1, 10}},
           {effect_roll, 10},
           {child_rules, ?EFFECT_RULES}, %% e.g. {child_rules, {rules, [...]}}
           ?EFFECT_PROTOTYPE_RULES]},

         ?attribute(p_dexterity, 1, 99, 0, 0, player, [{character, player}]),
         ?resource(p_stamina, player, stamina, 1, 100, 10, []),

         {rat,
          [{owner, room},
           {attack_wait, 10},
           {name, <<"rat">>},
           {exp, r_exp},
           {hitpoints, r_hp},
           {life, r_life},
           {attack_types, [melee]},
           {stamina, r_stamina},
           {attribute, r_dexterity},
           {icon, person},
           ?CHARACTER_RULES]},

         {r_exp,
          [{owner, rat},
           {gained, 0},
           {gives, 1},
           ?EXPERIENCE_RULES]},

         {r_hp,
          [{hitpoints, 1},
           {owner, rat},
           {icon, stat},
           ?HITPOINTS_RULES]},

         {r_life,
          [{is_alive, true},
           {owner, rat},
           {icon, stat},
           ?LIFE_RULES]},

         {r_dexterity,
          [{attack_hit_modifier, 1},
           {owner, rat},
           {character, rat},
           {icon, stat},
           ?ATTRIBUTE_RULES]},

         {r_stamina,
          [{owner, rat},
           {type, stamina},
           {per_tick, 1},
           {tick_time, 500},
           {max, 10},
           {current, 0},
           {icon, resource},
           ?RESOURCE_RULES]},

         {big_rat,
          [{owner, room},
           {attack_wait, 10},
           {name, <<"big rat">>},
           {exp, br_exp},
           {hitpoints, br_hp},
           {life, br_life},
           {attack_types, [melee]},
           {stamina, br_stamina},
           {attribute, br_dexterity},
           {icon, person},
           ?CHARACTER_RULES]},

         {br_exp,
          [{owner, big_rat},
           {gained, 0},
           {gives, 3},
           ?EXPERIENCE_RULES]},

         {br_hp,
          [{hitpoints, 1},
           {owner, big_rat},
           {icon, stat},
           ?HITPOINTS_RULES]},

         {br_life,
          [{is_alive, true},
           {owner, big_rat},
           {icon, stat},
           ?LIFE_RULES]},

         {br_dexterity,
          [{attack_hit_modifier, 1},
           {owner, big_rat},
           {character, big_rat},
           {icon, stat},
           ?ATTRIBUTE_RULES]},

         {br_stamina,
          [{owner, big_rat},
           {type, stamina},
           {per_tick, 1},
           {tick_time, 500},
           {max, 10},
           {current, 0},
           {icon, resource},
           ?RESOURCE_RULES]}]).

-define(WORLD_LEVEL_UP,
        [{room,
          [{visitor, player},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {exp, p_exp},
           {level, p_level},
           {icon, person},
           ?CHARACTER_RULES]},

         {p_exp,
          [{owner, player},
           {gained, 0},
           {gives, 0},
           ?EXPERIENCE_RULES]},

         {p_level,
          [{owner, player},
           {level, 0},
           {levels, [{1, 10}, {2, 25}, {3, 60}]},
           ?LEVEL_RULES]}]).

-define(WORLD_ACHIEVEMENT,
        [{room,
          [{visitor, player},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {icon, person},
           {achievement, p_achievement_got_wood_1},
           ?CHARACTER_RULES]},

         {p_achievement_got_wood_1,
          [{owner, player},
           {trigger, trees_chopped},
           {count, 0},
           {target, 3},
           {done, false},
           ?ACHIEVEMENT_GOT_WOOD_1_RULES]}]).

-define(WORLD_HISTORICAL_ACHIEVEMENT_ENOUGH,
        [{room,
          [{visitor, player},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {icon, person},
           {metrics, p_metrics},
           %{achievement, p_achievement_historical},
           ?CHARACTER_RULES]},

         {p_metrics,
          [{owner, player},
           {metrics, #{trees_chopped => 3}},
           ?CHARACTER_METRICS_RULES]}]).

-define(WORLD_HISTORICAL_ACHIEVEMENT_NOT_ENOUGH,
        [{room,
          [{visitor, player},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {icon, person},
           {metrics, p_metrics},
           {achievement, p_achievement_historical},
           ?CHARACTER_RULES]},

         {p_metrics,
          [{owner, player},
           {metrics, #{}},
           ?CHARACTER_METRICS_RULES]}]).

-define(WORLD_GET_QUEST,
        [{room,
          [{visitor, player},
           {visitor, shopkeeper},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {name, <<"Peter">>},
           {quest, p_quest_in_progress},
           {quest, p_quest_ready_to_turn_in},
           {quest, p_quest_turned_in},
           {icon, person},
           ?CHARACTER_RULES]},

         {p_quest_in_progress,
          [{owner, player},
           {giver, shopkeeper},
           {name, <<"in progress">>},
           {is_complete, false},
           {is_turned_in, false},
           ?QUEST_RULES]},

         {p_quest_ready_to_turn_in,
          [{owner, player},
           {giver, shopkeeper},
           {name, <<"ready to turn in">>},
           {is_complete, true},
           {is_turned_in, false},
           ?QUEST_RULES]},

         {p_quest_turned_in,
          [{owner, player},
           {giver, shopkeeper},
           {name, <<"turned in">>},
           {is_complete, true},
           {is_turned_in, true},
           ?QUEST_RULES]},

         {shopkeeper,
          [{owner, room},
           {name, <<"Brenda">>},
           {icon, person},
           {player_quest, [{name, <<"five rats">>},
                           {desc, <<"Kill five rats "
                                    "with your bare hands">>},
                           ?QUEST_RULES]},
           {player_quest, [{name, <<"temporary">>},
                           ?QUEST_RULES]},
           {player_quest, [{name, <<"in progress">>}]},
           {player_quest, [{name, <<"ready to turn in">>}]},
           {player_quest, [{name, <<"turned in">>}]},
           ?CHARACTER_RULES]}]).

-define(WORLD_NO_AVAILABLE_QUESTS,
        [{room,
          [{visitor, player},
           {visitor, shopkeeper},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {name, <<"Dorkle">>},
           {icon, person},
           ?CHARACTER_RULES]},

         {shopkeeper,
          [{owner, room},
           {name, <<"Smorf">>},
           {icon, person},
           ?CHARACTER_RULES]}]).

-define(WORLD_NO_QUESTS_LEFT,
        [{room,
          [{visitor, player},
           {visitor, shopkeeper},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {name, <<"Smorkennical">>},
           {icon, person},
           {quest, p_quest},
           ?CHARACTER_RULES]},

         {p_quest,
          [{owner, player},
           {giver, shopkeeper},
           {name, <<"only available quest">>},
           {is_complete, false},
           {is_turned_in, false},
           ?QUEST_RULES]},

         {shopkeeper,
          [{owner, room},
           {name, <<"Gaa'ark">>},
           {icon, person},
           {player_quest, [{name, <<"only available quest">>}]},
           ?CHARACTER_RULES]}]).

-define(TURN_IN_QUEST,
        [{room,
          [{visitor, player},
           {visitor, shopkeeper},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {name, <<"Peter">>},
           {attribute, p_charisma},
           {quest, p_quest},
           {icon, person},
           ?CHARACTER_RULES]},

         {shopkeeper,
          [{owner, room},
           {name, <<"Brenda">>},
           {icon, person},
           {player_quest, [{name, <<"turn in">>}]},
           ?CHARACTER_RULES]},

         {p_quest,
          [{owner, player},
           {giver, shopkeeper},
           {name, <<"turn in">>},
           {is_complete, true},
           {rewards, [{event, {add, 1, 'of', attribute, charisma, to, {player}}}]},
           ?QUEST_RULES]},

         ?attribute(p_charisma, 0, 0, 0, 0, player, [{type, charisma}, {amount, 0}])]).

-define(WORLD_COMPLETE_QUEST,
        [{room,
          [{visitor, player},
           {visitor, shop},
           {visitor, rat1},
           {visitor, rat2},
           {visitor, rat3},
           {item, p_glove},
           {world, world},
           {icon, room},
           ?ROOM_RULES]},

         {world,
          [{room, room},
           {clock, clock},
           {rules, []}]},

         {clock,
          [{world, world},
           {time, noon},
           ?TIME_RULES]},

         {player,
          [{owner, room},
           {hitpoints, p_hp},
           {life, p_life},
           {name, <<"Ratcatcher Ralph">>},
           {attack_types, [melee]},
           {resource, p_stamina},
           {attribute, p_dexterity},
           {body_part, p_hand_right},
           {body_part, p_hand_left},
           {exp, p_exp},
           {quest, p_quest},
           {icon, person},
           ?CHARACTER_RULES]},

         {p_quest,
          [{owner, player},
           {objectives, [{kill, rat},
                         {wielding, fist},
                         {wearing, glove},
                         {time, noon}]},
           {count, 0},
           {target, 2},
           {is_complete, false},
           ?QUEST_RULES]},

         ?exp(p_exp, player, 0, 0, []),
         ?hp(p_hp, player, 1000, []),
         ?life(p_life, player, []),
         ?hand(p_hand_left, player, <<"left hand">>, []),
         ?hand(p_hand_right, player, <<"right hand">>, [{item, p_fist_right}]),

         {p_fist_right,
          [{name, <<"right fist">>},
           {type, fist},
           {owner, p_hand_right},
           {character, player},
           {wielding_body_parts, [hand]},
           {body_part, {body_part, ?PID(p_hand_right), hand, make_ref()}},
           {is_attack, true},
           {is_defence, false},
           {should_attack_module, mud_attack_melee},
           {should_defend_module, mud_defence_melee},
           {effect_prototype, p_fist_melee_effect_prototype},
           {attack_type, melee},
           {resources, [{stamina, 5}]},
           {icon, weapon},
           ?WEAPON_RULES]},

         {p_glove,
          [{owner, room},
           {name, <<"Left-hand of Vecna">>},
           {body_parts, [hand]},
           {wearing_body_parts, [hand]},
           {type, glove},
           {desc, <<"A glove, I guess.">>},
           {is_clothing, true},
           ?ITEM_RULES]},

         {p_fist_melee_effect_prototype,
          [{owner, p_fist_right},
           {character, player},
           {type, blunt_force},
           {lifecycle, once},
           {hit_roll, {1, 10}},
           {effect_roll, 10},
           {child_rules, ?EFFECT_RULES}, %% e.g. {child_rules, {rules, [...]}}
           ?EFFECT_PROTOTYPE_RULES]},

         ?attribute(p_dexterity, 1, 99, 0, 0, player, []),
         ?resource(p_stamina, player, stamina, 1, 100, 10, []),

         {p_legs_2,
          [{name, <<"legs">>},
           {item, p_fist_right},
           {owner, player},
           {max_items, 1},
           {body_part, hand},
           {icon, body_part},
           ?BODY_PART_RULES]},

         ?clothing(p_pants, <<"pants">>, player, player, [legs_2], []),

         {rat1,
          [{owner, room},
           {attack_wait, 10},
           {name, <<"rat 1">>},
           {type, rat},
           {exp, r_exp},
           {hitpoints, r_hp},
           {life, r_life},
           {attack_types, [melee]},
           {stamina, r_stamina},
           {attribute, r_dexterity},
           {icon, person},
           ?CHARACTER_RULES]},

         ?exp(r_exp, rat1, 0, 1, []),
         ?hp(r_hp, rat1, 1, []),
         ?life(r_life, rat1, []),
         ?attribute(r_dexterity, 1, 0, 0, 0, rat1, []),
         ?resource(r_stamina, rat1, stamina, 1, 500, 10, [{current, 0}]),

         {rat2,
          [{owner, room},
           {attack_wait, 10},
           {name, <<"rat 2">>},
           {type, rat},
           {exp, r2_exp},
           {hitpoints, r2_hp},
           {life, r2_life},
           {attack_types, [melee]},
           {stamina, r2_stamina},
           {attribute, r2_dexterity},
           {icon, person},
           ?CHARACTER_RULES]},

         ?exp(r2_exp, rat2, 0, 1, []),
         ?hp(r2_hp, rat2, 1, []),
         ?life(r2_life, rat2, []),
         ?attribute(r2_dexterity, 1, 0, 0, 0, rat2, []),
         ?resource(r2_stamina, rat2, stamina, 1, 500, 10, [{current, 0}]),

         {rat3,
          [{owner, room},
           {attack_wait, 10},
           {name, <<"rat 3">>},
           {type, rat},
           {exp, r3_exp},
           {hitpoints, r3_hp},
           {life, r3_life},
           {attack_types, [melee]},
           {stamina, r3_stamina},
           {attribute, r3_dexterity},
           {icon, person},
           ?CHARACTER_RULES]},

         ?exp(r3_exp, rat3, 0, 1, []),
         ?hp(r3_hp, rat3, 1, []),
         ?life(r3_life, rat3, []),
         ?attribute(r3_dexterity, 1, 0, 0, 0, rat3, []),
         ?resource(r3_stamina, rat3, stamina, 1, 500, 10, [{current, 0}])]).

-define(WORLD_COMPLETE_GET_QUEST,
        [{room,
          [{visitor, player},
           {item, r_glove},
           {name, <<"room 1">>},
           {icon, room},
           ?ROOM_RULES]},

         {player,
          [{owner, room},
           {name, <<"Ratcatcher Ralph">>},
           {quest, p_quest_1},
           {quest, p_quest_2},
           {quest, p_quest_3},
           {quest, p_quest_4},
           {icon, person},
           ?CHARACTER_RULES]},

         {p_quest_1,
          [{owner, player},
           {objectives, [{action, get_item},
                         {item_type, glove},
                         {room_name, <<"room 1">>}]},
           {count, 0},
           {target, 1},
           {is_complete, false},
           ?QUEST_RULES]},

         {p_quest_2,
          [{owner, player},
           {objectives, [{action, get_item},
                         {item_name, <<"Left-hand of Vecna">>},
                         {room_name, <<"room 1">>}]},
           {count, 0},
           {target, 1},
           {is_complete, false},
           ?QUEST_RULES]},

         {p_quest_3,
          [{owner, player},
           {objectives, [{action, get_item},
                         {item_type, glove},
                         {room_name, <<"room 2">>}]},
           {count, 0},
           {target, 1},
           {is_complete, false},
           ?QUEST_RULES]},

         {p_quest_4,
          [{owner, player},
           {objectives, [{action, get_item},
                         {item_name, <<"Left-hand of Vecna">>},
                         {room_name, <<"room 2">>}]},
           {count, 0},
           {target, 1},
           {is_complete, false},
           ?QUEST_RULES]},

         {r_glove,
          [{owner, room},
           {name, <<"Left-hand of Vecna">>},
           {body_parts, [hand]},
           {wearing_body_parts, [hand]},
           {type, glove},
           {desc, <<"A glove, I guess.">>},
           {is_clothing, true},
           ?ITEM_RULES]}]).
