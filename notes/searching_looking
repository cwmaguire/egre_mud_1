Searching / Looking

Dec 26, 2017

Why would I need to have any depth for a description event?
If the receiving object is the target of the description then it:
1) Prints it’s description
2) passes on the describe event to its children

If I do “look room” then I’ll get:
“Room A blah blah blah”
“Room A -> Bob”
“Room A -> Alice”
“Room A -> sword”

Then I have to do “look Bob” if I want to see Bob

If I wanted something like a Bash “tree” command _then_
I’d need a flag are an argument. A flag if I just wanted the entire
tree or an argument if I only wanted up to X children deep.
Issue: how do we know what an object is based purely on it’s name?
“Room A -> snargle” … is that an item? a body part?

I think the description templates should include object type
May 14, 2016

If the room sends a describe then each character has to resend
a describe in such a way that the character’s attributes describe it,
but the character’s body_parts don’t. i.e. we want a surface level
description, not a deep description.

I could throw in a ‘deep’ / ‘shallow’ flag.

I’ve broken the rules with attributes. If something changes your
age or hides it, or hides your gender, or changes the appearance
of your height then I won’t be able to implement that because the
attributes are describe themselves during the parent’s attempt, not
with their own event. I really need to kick off their own event.

Entry Hall -> Bob
Entry Hall -> Bob -> 32 years old
Entry Hall -> Bob -> 100kg
Entry Hall -> Bob -> Male
Entry Hall -> Bob -> Dragon

Anyone of these could be changed or hidden

So, in answer to my May 3 question of:

What would an example of an attribute needing to succeed
at it’s own description?

Any spell, skill, atmospheric effect, weather, lighting, racial trait,
ability, drug, psychosis, psionic power, video filter, confusion,
low observational skill, hunger, wound, etc.

I’m shooting myself in the foot if I break away from the patter for a special
case.

No synchronization. No waiting. No coordination.
Only new information being fed into the graph.

Just out of curiosity, how else could I allow hooks into any object-event?
- pause and survey
- Pausing everything in Erlang is just dumb. I might as well be single-threaded
at that point.
- pub/sub
- I’d have to actively register each object with every possible event
source around. Say I’m a sleeping zombie waiting for sounds or smells.
I’d have to register with every object that came by that could make a smell
or a sound. Real objects don’t actively pick and choose what input they receive,
they simply accept whatever input the world thrusts at them. For example,
sound vibrations bounce off of everything, but not everything will have logic that
is triggered by the sound.
- broadcast
- Instead of passing an event along through the graph I could just blast
the graph. I’d either have to wait and collect the results or I wouldn’t be able
to have events interact with each other (e.g. calc_hit, calc_damage). Although,
calc_hit only has interactive messages because I _don’t_ have a broadcast. Each
calc_hit interaction must be commutative so that it _isn’t_ an interaction but rather
a fold. A reduce instead of a map/reduce.

Direction I’m going:
If the depth is ‘deep’ then all the body parts and attributes will print out:
Bob -> giant
Bob -> arm
Bob -> hand
Bob -> hand -> sword
If the depth is ‘shallow’ then only the race attribute will print out:
Hallway -> Bob -> giant
Hallway -> Alice -> unicorn

So you’d go:
> look
Hallway -> blah blah blah
Hallway -> Bob -> giant
(could be: Hallway -> Bob: giant)
Hallway -> Alice -> unicorn
> look Bob
Bob -> giant
Bob -> arm
etc.

Note that the character doesn’t output anything.
May 3, 2016

I’ve got looking at characters and looking at rooms working.

Now I want to have attribute processes that will output their
part of the character description. I was having some thoughts
about re-sending a description message and having an attribute
add to the description, but at some point I also thought about
having attributes output their own descriptions:

Giant -> 6m tall
Giant -> 400 kg

Oh, yeah, that’s why I was tracking “HandledBy” since I'm
resending the event: I don’t want the same attribute to handle
it again.

I don’t think I want to get into resending an event through the
graph for each and every attribute. Instead, I can add to the
event rather than re-sending it. I think I might have been
trying that at first.

Giant -> 6m tall, 400kg, glowing, giant, male.

Oh, should I put the description together on attempt, or succeed?
Unless an attribute depends on another attribute’s describe event
succeeding then describing on attempt is fine.

What would an example of an attribute needing to succeed
at it’s own description?
April 10, 2016

Okay, where am I with this.

Rooms only have to describe what is in them to one level deep.
Room
Character 1 e.g. “A giant is in the room"
Character 2 e.g. “Player1 is in the room"
Item1 e.g. “A sword is in the room” (or “in the room you see a sword”, or “room -> sword”)

Characters have to describe what is part of them and on them to two levels:
Character “Character is a 29 year old, 5m tall, female giant."
Arm “Character has an arm"
Head “Character has a head"
Helmet e.g. “Character is wearing a helmet"

Since I need to coordinate between different process that will participate in the
description I need to kick off more messages. If the children listen for “look” commands
succeeding on the parent they’ll kick off messages to themselves (which _their_ children
will then see succeeding, and kick off messages to _them_selves.

How to tell if a glove is held or worn? Nothing is “held” - if it’s in the hand, it’s worn. If a sword
is in the hand then it’s wielded. I _think_ this is where I was going with the “context map” - based
on where on the body an item is located we can tell how to describe the relationship to the character.
BUT, what if we just did: Giant -> hand -> sword

e.g.
You see a 29 year, 5m tall, female giant
giant -> hand
giant -> hand -> gloves
giant -> hand -> sword
giant -> hand -> gloves
giant -> head
giant -> head -> helmet
giant -> leg
giant -> leg
giant -> leg -> plate leg armour
giant -> leg -> plate leg armour

Yes, I think this is the way to go. We still need a context, but no context map.
The player can deduce that x -> hand -> glove means “worn” and x -> hand -> sword
means wielded.

I think we can describe the current item and simply list the context:

"You see a blah, blah, blah giant."
“giant -> left leg is bleeding"
“giant -> leg -> plate armour: blah blah"

I think, since characters can’t be expected to know the names of random
NPCs, that each character should have an auto-generated name.
e.g. gia1 (e.g. giant 1)
giant1
g1
Part descriptive, part random

If body_part sees it’s owner as the target of a look command then it will resend
to itself. If the room is being described then the character will simply describe
itself; i.e. it won’t resend a new command with itself as the target like the body_part.
The body_part needs to resend so that the body_part’s children can see the message
going out with the body_part as the target. The room doesn’t need to do this because
the character does need to go down another level: the room doesn’t have intermediate
children like body parts.

Actually, I may find that exits are intermediate and need to resend a command with the
exit as the target so that exit children (e.g. a door) can describe themselves.

e.g. “Temple entrance -> exit north -> wooden door with claw marks in it."

Tests:
- Look at room with character (no body parts or items described)
- Look at room with item (item described)
- Look at character (body parts and items described)
April 1, 2016

In order to have a verb context map that is specific
to species, e.g. giants, I need to provide “giant” as part
of the context instead of just “erlmud_character”. I’ll need
to do the same for body parts.

I don’t have description gear on body parts yet.

Rooms can allow one level of sub description
Characters can allow two (for body parts and then clothing)
Containers can allow one

If a character is not the target of look then it doesn’t need to
describe it’s clothing and weapons.

For some reason I figured I didn’t need to resend a look to look
at a child object, but then I can’t get lower than two levels.
I’m thinking when the target succeeds it resends to it's children.
No, because then I have to look through the children.
When the child succeeds it can resend to itself and then _its_
children will see it.

I need levels because … well, actually, items might be able to tell
just from the message shape that the ‘look’ message is filtering down
through a context hierarchy rather than coming directly from a player.
March 31, 2016

Crap. If I only go one level deep in descriptions I’m only
going to get body parts: head, legs, proboscis, missile rack,
tail, etc. I need to go two levels deep to get clothing.
I thought about sheathed swords but … no. This isn’t a clothing
simulator.

Okay, I’ll track the described level and the context path:
e.g. Level = 2, path = {person, head} (hat / helmet)
Level = 1, path = {person} (all body parts)
Level = 2, path = {horse, back} (saddle)

Or maybe in a list; I’ll just have to maintain the order

Do I need the parent context? a giant’s hand holds just
as an orc’s hand holds, or a human’s hand. Hands hold,
heads wear. … Except a species can do anything with any
body part: a head could hold. But that’s where the context
verb map comes in.

[{giant, [{head, [{hat, wears}]}]}] ?
This would solve the glove vs. sword issue … no it wouldn’t
because then a hand could wield or wear … Oh, duh,
the _hat_ is worn in the example above so:

[{giant, [{hand, [{sword, wields}]}]}]

I can allow the player to configure skipping describing
body parts and I can also allow for missing or adding
body parts.

I’m going with the idea that the whole first layer of a characters
object properties are body parts and are described with “has a”.
All 2nd layer properties, i.e. properties of body parts, are clothing
or other non-body parts and the attachment verb is listed in the
context_verbs environment variable.
March 29, 2016

I’ve got looking working for the target object:
> look pete
> Pete , a male Giant , 4 m tall and around 400 kg.

Next step is:
> Pete is <wearing/wielding/carrying> a ________

Questions:
- how to pick the verb? (e.g. wearing / weilding / etc.)
- how to differentiate between wearing and holding? (e.g. gloves)

Item type? - “clothing” -> "wearing"
There’s also body types that items are associated with.
Only the body part will know how the item is attached

Actually, the player doesn’t really “hold” anything specifically
in their hands. Anything they “get” goes into inventory.

So I just need to worry about wearing and removing items.
The test will have to set up which items are worn.

Feb 3, 2016

Describing things. Add short adjectives.
"Sword, heavy, gold, jewelled"

Potentially add components:
"Sword, steel, rusted, double-edged, glowing
pomel, jewell encrusted
sheath, leather, worn"

Short and long description modifiers

I'm leaning towards a separate process that
walks through each object that adds itself
and running it's description command and then
printing out all the descriptions.

If you cast {succeed, Msg} to an object then succeed() is
called and the resulting properties are stored in the state.

So if we send out a bunch of describe messages
we can wait until they all get back and spit out the description.

Except, the whole idea of this thing was to have processes
modify messages as they go by. That was the entire point:
"Oh, you're trying to describe yourself? Well I'd like to modify
the message you're sending."

Or "You're trying to hit that target? I can help you with that! Here's
a +1 to hit."

I guess I'll have to specify that an object modifies the description
of it's owner.

{describes, Owner}

I like that.

Maybe even {component_of, Owner}
Jan 29, 2016

Okay, so here's a question:

"search room"
Do we search all containers in the room?
I don't think so.
So how do we know to stop at a container in a room
but not stop in a container in a container?

Never search a container in a container?

How do you search a box in a box?
Refer to the inside box by name.

Or hierarchy? Or custom name?
Or nickname? with multiple nicknames?

e.g. "box", "yellow box", "box'o'keys", "box from barn", etc.

"You see a box"
"aka: box, yellow box, box'o'keys, box from barn"
Jan 27, 2016

This does not have to be a pickpocketing simulator.
For live, mobile targets we can simply return:
"<name> probably won't appreciate you rooting through
their person."

For immobilized or inanimate objects we can take our time
rooting through everything.

There's two main approaches I've had:
- Do the whole search and output all the results
- Do many small searches and output each result asynchronously

I like having things happen asynchronously. Let the search progress
and spit out messages as they occur.

So if we fire off "search box" what should happen, at a high level
- find all items in the box
- tell the item to describe itself to the player
- tell the item to search itself

A search command can look in a container and fire off a new
search command for each object.
Or, a search command can tell a container to pass on a
message to each of it's children

Only containers should search themselves. Aggregate items
i.e. a rifle with a scope woudn't be considered a container.

The rifle is in good condition
... the rifle has a scope that ...
... the rifle has a silencer
Dec 5, 2015

Look vs. Search

You should be able to look at something without searching it.
Searching it is quite a bit more involved but you could just look
at someone.
I should finish search first and then do the look command.

So, trundle through each item and spit out … something.
Worry about interruptions later.
Nov 22, 2015

I don’t like the idea of finishing a search if the source
object gets attacked by the target (or by anything else) mid-search.

I’d rather a search continue until the source object gets
interrupted. An attack would definitely interrupt a search.

I could have the search look at the top level of the target and return
a list of what it has. If that succeeds then we can wait a bit and
kick off a search of the first item, then successive items.

This could be done in a separate search object. I’ve already
started this and abandoned it though. I can’t remember why.

The search object could track what’s been searched and what's
left; or even just what’s been searched and whether or not that
process has any searchable child processes.

“Search lightly"
“Search"
“Search deeply"

Levels of risk when attempting to rifle through a targets
inventory.

Unless you’re a pick-pocket you’re not going to be searching
targets very often since they’ll just attack you. Better off just
to kill/disable the target first.

Better just to stick with “search until interrupted"

Does this make sense for searching containers?
Sure, if it takes time to rifle through containers in containers in containers.

We could spit out results as they happen
OR
Spit out results on successful completion
OR
Spit out the contents of the container when either it’s finished
(breadth-first) or when it’s interrupted.

You find:
- a bag
- a book
- a ball
… your search was interrupted
Nov 21, 2015
What do I want back?
A list of object descriptions for what the source object could
find on the target object.

How do I get that?
Send out a message.
Each object will check if it is a child of the target.
If the object is a child it will check it’s difficulty to
see if the source can find it.
If the source can see it then the target adds itself
to a hierarchy of visible items with it’s own difficulty added on.
One the source gets back a hierarchy (i.e. on success) it can
send out a “describe thyself” message where ...
The objects might as well describe themselves once ...
(Nope, descriptions take another call)
I need to send out a message to:
a) get every process to describe an object
b) list all the descriptions together
… maybe just have all the descriptions come back
at random times?
Actually, that would be pretty cool

“On Bob you find a glowing red sword"
..
“On Bob you find a loaf of raisin bread."
..
“On Bob you find a laser rifle"

“Searching Bob reveals a _____"

That brings up an interesting question: if you have a laser rifle with a
scope, laser sight and bi-pod do they describe themselves individually
or do I need to know that child items are components rather than
contained items. A relationship field would solve that.
[{owner, <0.253.1>}, {relation, container | compound_object | body_part}]

If I just get back a list of items then I won’t display the hierarchy. I won't
say something like:
You find a brown shoulder bag containing: a loaf of bread."
You’ll just get:
You find a brown shoulder bag.
You find a loaf of bread.

Really the hierarchy is irrelevant to the user.

Can the user do a quick survey of the target instead of a deep search?
Maybe specify how deep to go?
Maybe the difficulty to try?
You could just look at the target, see what they have and
then search one of those objects … but then you'd
still probably want to set a depth unless you were going
to manually walk through the entire hierarchy

How do I send out a command that says: “get a description for this
object and then send it to the user with “Searching ____ reveals: "
tacked on the front?

I could just pass the prefix with the description message.
I don’t think I’ll ever need a raw description:
Looking.
“You see a ____"
“You see a ____"
Or
“Looking around you see: "
“ … a bag"
“ … a loaf of bread"
Oct 29, 2015

Parent-child hierarchy tree insert function:
-module(erl_hier).
-export([new/1]).-export([insert/2]).
new(Parent)_->____{Parent,_[]}.
insert({Parent,_Children},_Obj)_->____insert({Parent,_Children,__PostChildren_=_[]},_Obj);insert({Parent,_PreChildren,_PostChildren},_{Parent,_Obj})_->____{ok,_{Parent,_[Obj_|_PreChildren]_++_PostChildren}};insert({_,__PreChildren_=_[],__},__)_->____undefined;insert({Parent,_[Child_|_PreChildren],_PostChildren},_Obj_=_{_NotParent,__ObjChild})_->____case_insert(Child,_Obj)_of________{ok,_NewChild}_->____________{ok,_{Parent,_[NewChild_|_PreChildren]_++_PostChildren}};_______ _ ->____________insert({Parent,_PreChildren,_[Child_|_PostChildren]},_Obj)____end.
Oct 24, 2015

Trees. Batched descriptions.

Description example:
- sword description: “black longsword with ruby pommel"
- sword description when owned by Bob:
“Bob’s black longsword with ruby pommel"
Nah, that’s dumb. You wouldn’t want _every_ item carried
by Bob to show up as “Bob’s …” in a list
- enchanted sword:
“Enchanted black longsword with ruby pommel"
- Enchanted with colour-coded enchantments
“Black longsword with ruby pommel pulsating with
yellow and blue light shooting off red sparks and
crawling with purple arcs of electricity"

Trees. If I keep all the objects that are found in a hierarchy, then
the recipients of description messages can tell if they own any
items that are more than one level deep.

Bob
Backpack
Rations

Bob can see that he has “Backpack”, but without sending a message
to Backpack he can’t tell that he actually owns “Rations”.

But, … does he? Does an exit own a room or does a room own
an exit. … well, doesn’t really matter.

How will I know I’m searching something that is part of a character?
Object type: body part, container. I’m assuming a character won't
have a reference to something not on their body. Maybe that’s not
correct. Different objects can always respond to the search message
differently.
Oct 22, 2015

I could make a client that receives the list of items.

Although I'd rather a more concrete way of determining that
the correct items got picked up.

I probably need a minimum search time (based on user's ability?)
so I could set that to be really long and then check the items.

This is kludgey, but it's what I do for attack and realistically
I do need to make sure searches aren't instantaneous.
I think.

Of course this would mean that the search process would
have to listen for anything that the target added or removed
during the search wait.

A better way might be to not _start_ the search for a minimum
amount of time; then we'd have acccurate results.
Oct 21, 2015

Okay, so I can return a huge list of items that can be found
along with their difficulty.

So how do I test it?

All I’m doing is sending the list of found items out to the user.

I can’t test for … OH, I _can_ test for specific output because
I can control the item names based on the test world.

So, other than mocking, how can I pick up what it’s being sent
out to the user?

Have the items somehow send messages to the test process?

Normally I check props on objects. How will this list of items
become properties for some other object?

I have mock_object but it just responds to prop requests.

Okay, so how am I going to output the list of items to the user?

start up a process that will get all these props, get all their
descriptions and then send them to the user.

Maybe I could check the search_output props to see that
all the items are there, but the search_output is a temporary
object. How did I deal with this in attack processes?

I put a long wait on the attack process so that I could
catch it before it dies.
Oct 18, 2015

Arg. If I change the message and resend it I might have to
send it a whole bunch of times. Every time I encounter a new
container or body part I’d have to start back at the beginning.

Oh, duh, I’m not _resending_ the message, I’m just changing the
message.
Oct 15, 2015

The searchee can add everything it has in it’s inventory
to the attempt
Oct 12, 2015

What will affect a search:
- distractions: number of people in the room
- aggression: is the target aggressive against the searcher
- searcher skill
- searcher skill boosts
- target skills/stats: awareness
- target skill boosts

Ah, erlmud attack is a process that manages the attack.
erlmud_search can be the process that manages the search.
If either the source or the target leaves the search will cancel itself.
Oct 9, 2015

We can update messages on attempt.

(Wouldn’t make sense to change the message on succeed as any
process that got it before the change wouldn’t see it.)

erlmud_attack has three stages:
calc_hit
calc_damage
damage

Search can have more than one stage:
calc_search
search
Oct 4, 2015

How alert the target is should be a factor and
should be discernible.

e.g. “The guard is sleeping."
“The guard dog is watching you intently."
“The goblin seems distracted."

We need to know, first off, if we can search _at_ _all_:
- does the object exist?
- can we reach (i.e. in the same room)
- is the target (if sentient) too alert

search_init

- everyone says if this can succeed
- no one cares if a search _can_ happen

Secondly, we need to perform the search:
- Does the target know we’re searching it?
- Does it care?
- What do we find?

search

- everyone says how effective the search was (like hitting and damaging)
- no is going to refuse at this point
- The target cares if the search succeeds
Sept 27, 2015

search_init ->
<- searchee attacks (if property is set)
<- return search results
what if searcher is gone?
Does it matter? The search was sent off before the
searcher left?
It’s just information at this point.

search ->
How can we guarantee the target hasn’t left yet?

I can make it harder to find items on a character or in a container
depending on how deeply they’re buried.

e.g. if a wizard has a ring in a pouch in a box in a satchel that's
going to be a bit difficult to find.

A clumsy person might not be able to search someone very well
but an experienced pickpocket could.

Then again, the searcher shouldn’t really be able to search
a container on a person unless they were _really_ good.

It should be enough that the searcher can find all the top level items
on the target.

Make the success level be the product (?) of the difficulty modifiers
of the containers on the target:

e.g. a ring (difficulty = 1.2) in a pouch (difficulty 1.5) in a box
(difficulty 2.0) on a wizard (difficulty 1.2)
Total is 43.2
Subtract the players pickpocket level

Oh, the target should attack unless they know they’ve been searched.
If any search fails then the target should be alerted: search_failed.

A search will fail if any search check fails

An individual item shouldn’t have a difficulty, just a container.
