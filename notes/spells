Spells

Feb 13, 2019

I merged the spells branch a couple days ago and now I have a couple
tests for it.

I wonder if the spell effect processes are going away?
Feb 8, 2019

I’m going to spawn a process for each spell effect. It will kick of
another process whenever the spell is called. The new process will
know it’s target and will copy its properties from the prototypical
process.

I can just have the spell copy its effect process’ properties and create
a new process rather than creating yet another message.
Oh, because the spell won’t _have_ those properties. The only
object that has them is the spell effect.

Remember, messages are getting cheaper all the time.

There can be spells that defend (e.g. buffs) and spells that attack
(e.g. familiar). So I’ll have {is_defence, Boolean} and {is_attack, Boolean}.

I could be more abstract and call spells “effects” since there could be other
things that follow the pattern of spells: you set something up and then that
kicks off some effects.
Ah, a spell_effect handler can kick off a generic effect_attack handler.
Effect handlers act exactly like weapons:
Calc hit,
Calc damage

Messages are free.
Messages are free.
It doesn’t matter how long it takes to play the MUD, so long as it works.
Feb 7, 2019

The more I look at the vector_attack handler the more it looks like it fits
spells.

Even calc_hit comes into play because the player not being able to get
off a spell. Actually, I’ll need to specify what kind of attack it is so that
other processes know what kind of attacks they’ll modify.

I need to re-word
{Character, calc, Hit, on Target, with, Self}

{Character, …

What’s a name for the amount of … success the player has accumulated?
Roll?
Weight?

Well, it has to be random, to some degree. If you do the exact same damage
every time that’s going to get boring.
I think I’ll just have to balance the random part with the bonus parts.
e.g. it would be silly to have the hit roll be 1-4 and then have 100 points of
bonus. What would be the point of rolling? Although, at some point the
character is probably all but guaranteed to hit anyway.

These are getting long ...
{Character, calc, success, Bonus for, Types, on, Target, with, self()}
… but I have to admit it’s very expressive.
Better than …
{calc_success_bonus, Character, Bonus, Types, Target, self()}

I have to remember to assume unlimited CPU power.

I could split out the hit and damage calculation from the attack handler.
The attack handler just knows when to kick off an attack. Once the attack
is kicked off then another handler (on the same or a different object) could
handle the success and damage calculations.

I was thinking of doing spells in three stages:
- cast
- hit
- damage
… but anything that wanted to modify cast (i.e. whether the character could
cast the spell) could just modify hit. I don’t think I need to check if they can
cast a spell _and_ if they can hit the target with it. Although it would be cool
to see both “You fail to cast the spell” and “The spell misses” (or “The spell
has no effect”)
The thing is, I don’t need all three stages for a melee attack.

When the attack succeeds then you kick off the event to see if you can cast.
If the cast succeeds then you create a new object to do the spell work.
February 6, 2019

I’m wondering about auto-casting spells, similar to other auto attacks.
e.g. I’m used to just typing “attack” and my character uses whatever
attacks it has (e.g. a sword) as fast as possible.
Maybe “cast fireball” will just keep casting fireball as fast as possible.
Could have "cast fireball 1” to cast it once.
Or, “{acast | ac | autocast} fireball”
oooh, “continual cast” “cc fireball”
Then mistakenly typing “c fireball” isn’t a big deal, once the spell
ends you just type “cc fireball”

Permanent spells, like a buff or something, might continually drain
spell juice / mental energy / mana / midichlorians.

Or, spells could be setup to autocast on attack.
e.g. a user could setup “fireball” and “cone of cold” at 60/40
Or, just specify how many times in a row each attack should fire:
{fireball, 2}, {cone of cold, 1}, {bind 1}
… and it just keeps cycling through that as fast as possible.
Some spells might need more than one resource, but the order specifies
how they wait in line for each one.
Once the fireball spell has enough of one resource it shouldn’t (doesn’t?)
register for more of that resource until it fires again.

A spell is just like an invisible item.
I can probably use the item code.
Instead of “wield” I could use “prepare” for spells.

I don’t currently have a “wield” action but I do have code to check
and see if an item is wielded. I could change this to “active”

Hmmm, could you auto-cast something like a buff spell?
I think I’ll need a property to control whether you can “prepare”
a spell to be part of an attack.

If a spell has lasting affects should it be one process that affects
multiple targets, or one process that’s fired off for each target.
I think each target should get it’s own spell object that follows it
until it’s done.

So now I need to differentiate between an instantaneous spell
and a lingering spell.
OR
I could have _all_ spells be lingering spells, except some of them
don’t linger for very long. This would actually be very good for
spells that can get more powerful:
a fireball spell could level up:
- getting bigger (more area of affect)
- lasting longer (continually attacking)
- being hotter (more damage)
Of those I think only “lasting longer” would actually be helped
by having all spells be their own objects (i.e. lingering) rather
than … what?
So I’ll need a spell object and a spell _effect_ object.
Lingering would be a spell effect object, instantaneous would
be handled by the spell object.
Think of a spell as like a scroll.
You read off the scroll and that creates an effect.

What about defensive spells?
Those should be spell effects, not spells. You can’t
cast a spell fast enough to, say, block an arrow
… and if you could (because we can model any reality)
we could just model that as a lingering spell (perhaps permanent)
instead of an instantaneous spell.

So do I have item attacks that are their own processes too?
Hmm, I could do stuff like bleeding damage.
But I think … well, what else would kick off a bleeding damage
attack?
The character could, if it had a bleeding damage listener.
That sounds good. A bleeding damage listener.

Spells wouldn’t have a defence hit modifier, but a spell effect would.
So maybe erlmud_handler_vector_attack isn’t a good idea.
Unless I just set spells not to have a defence modifier.
We’ll see if it continues to be unwieldy.
Crap, they won’t have calc damage either.
Well, I think “vector_attack” is a better name anyway.
But, they do have all the resource stuff. no defence modifiersno attack modifiersdon’t calc hitdon’t calc damage
Spell _effects_ should be modelled by the _vector_attack handler,
not the spell itself
Except spells need to be kicked off on attack or counterattack.
I think I should just copy those aspects.

Spell effects don’t stop when the attack stops.
They also don’t change targets when the character attacks a new target.
It might seem like it if a spell had a quick cool-down and low resources
and the character changed targets: this stream of attacks would switch
as well.

Oh, I can have a “cool down” resource.

What property do I use to link a spell with its effect?
I could just give a generic “spell effect” process a bunch
of properties.

Ah, I have to distinguish between melee hit modifiers
and spell hit modifiers
November 15, 2018

A spell is simply a world modification
- maybe time limited
- maybe specific to a particular part of the world

It would be very cool to have lingering spells.
You could go around having to clean up lingering spells.
Or, you could co-operate and keep a certain area affected
by a spell: e.g. a monster-free zone that players upkeep regularly
July 10, 2016

Okay, I’m ready to start this.

- A spell is a process.
- A character will attempt to cast a spell, like creating an attack
Speaking of which, how does an attack get the player to periodically attack?
It just sends out ‘calc_hit’ and ‘calc_damage’.
- A spell will listen for ‘calc_hit’ and ‘calc_damage'
- I can have different handlers for spells:
- attack spell
- defence spell
- skill spell

- “cast foo"
- parse listens for “cast “ and resends {cast, Player, &lt;&lt;“foo”&gt;&gt;}
- player spell handler listens for {cast, Player, …}
- skill check
- which handlers?
- I could probably just have a different handler for each spell
- fireball: “You cast fireball”, calc_hit, calc_damage
- acute hearing: listens for sound events and adds a hearing bonus
- healing: “You cast healing on {yourself | someone else}”, update hp
- locate item: “You sense the item to the nw"
- bless: “You cast bless on {yourself | Bob | the sword}” - update target attributes
- remove the attribute when the spell fades
- OOoooh, spell fading
- curse … same as bless
- restore energy: boost stamina
- quick hands: boost calc_hit
- quick feet: boost defensive calc_hit
- bark skill: boost defensive calc_hit, calc_damage
- player spell handler kicks off spell process with spell handlers

What types of spells are there?
Attack buff / nerf
- curse, confuse, bind, bless, illuminate, shadow
Straight up attack - acid, fire, ice, electrocute, mind attack, blood boil, etc.
Defence buff / nerf
Skill, attribute buff / nerf
- vision, hearing, feeling, smell, taste (e.g. poison), heat/cold,
health, stamina, food, water, fear/bravery/rage, encumbrance, speed,
Telekinesis - lift, grab, lock, open, push, pull
Identify
Teleport - self, other, item
Telepathy
All the attribute buff/nerf spells should be easy.
Moving, travelling, chatting and identifying could be harder, but I can take them one at a time.

More thoughts in Attack
June 18, 2015

You cast a spell and it becomes a process that does something.

Buff spell:
periodically does something to something
watches for events from something (e.g. mob entering room, mob attacking player)
applies an effect and then after a while undoes it


Spells could be triggers, temporary modifiers, permanent modifiers (e.g. heal), blockers,
detectors, getters, putters, etc.
