Effects


December 23, 2020
Effects may need to stick around for a while and keep dealing damage: e.g. fire doing 2 points of damage every second. Therefore, effects should be processes. It's okay to have extremely short-lived processes, except I don't fire up processes for each event, I'll keep a process going for anything that has logic.
How does a long-lasting effect manage multiple targets? Resources with ticks?Just keep a list of targets and use timers to fire off events? Start a new process for each effect-target pair?
<-- I like this
November 10, 2020
Effects only need one roll: they only fire if the attack has succeed (e.g. spell, melee, whatever) so they just need to see if they do damage.
I'm changing the protocol message to {Character, Roll, for, EffectType, on, Target, with, Self}
November 9, 2020
One arbitrary attack type for protocol pattern matching.
Then again, why even have one?
It will be the protocol designers responsibility to make sure they match on a known field.
In fact, it _could_ be attack type, because it's protocol specific.
I should probably have a test with 'random_attack_property' just to demonstrate that.
I could just easily have a bunch of flags:
is_electrical_attack
is_melee_attack
is_spell_attack
is_wish_attack
is_tentical_attack
is_bite_attack
... I can match on these, whereas I can't match on a list of booleans.
I could match on map fields though.
I assume if the field doesn't exist in the map that it just doesn't match
Yup.

I don't like the idea of messing up my protocol with maps. Once I choose to use _a_ map, then I'll eventually need to switch _everything_ over to maps.
However, it would be stupid to not use a useful tool because it makes the other tools more specialized (i.e. not as useful in some scenarios).
Effects could be almost identical except for the types. I should probably have a generic affect handler.
I'll start specific, then generalize after.

I think each effect should have a prototype to copy properties from.
Unless I have parameterized handlers, how will the effect attack handler know what to do?
Unless I put the effect type in the properties.
Because really, an effect can just be a type and a number: e.g. 10 points of fire damage, 2 points of healing, 100 points of confusion (or -100 of focus).
I need to trap attack successes in effect prototypes in order to kick off effects.
How do I trap all the different kinds of attacks?
Do I _need_ to have "cast spell" in the protocol? Or can I just have attack?
The text that the player sees can just be a property.
I think weapons should only parry if the character has enough stamina
... and perhaps later, focus
I can imagine attribute bars getting depleted and then starting to refill immediate like in Diablo: the character is constantly getting refilled with, say, stamina, but if they keep attacking quickly they keep draining it.
Now the question is: does a block register for stamina and then wait to get it?
I guess the user could specify if they want to prime some parries, or if they just want to go all in with attacks.
At 50/50 they could prime a parry before every attack
Or they could specify 2:1 and always make sure to have two parries ready before launching an attack. I like this.
November 8, 2020
Ha! I already have effects, except they're just for spells.
Should I just have the attack be a place-holder for a list of effects that all need to attempt separately?
What about effects that rely on each other?
e.g. fire effect doesn't hit if punch doesn't connect
But, you could do zero damage with a punch (e.g. against metal armour) but still burn the target
I think the attack process should see if the attack "connects" or not, then each effect can see if it effects or not
attack type
| attack
| effect ------------------------------------physical
| sword
| cutnon-physical | fireblast | fire, concussivephysical
| club
| bashnon-physical | psyonic
| stun, confuse
Does it even matter if the attack is physical?
Yes, if I want to have blocking capabilities specific to an attack
e.g. I can block a sword strike with a shield, but I can't block an electric current or a cold spell
Do I need to care what kind of attack type a designer chooses? They just need to be consistent within their own mud.
So I can call attacks whatever I like in the context of the MUD world.
The "protocol" will then need to include that attack type
So I can call the attack type "sword", and the attack "sword" and the effect "sword" if I like.
The point is, I need to be able to recognize different layers of abstraction on the attack ...
I could do that with having a list of attack types:
e.g. [melee, physical, sword, metal, etc.] (say, if metal weapons don't affect a certain race or something
If I stick to one super-type and one sub-type then I can match on them.
Beyond the top-level type then maybe you have to dig into the properties to figure out if there's something pertinent.
There's no way I'm going to cover every conceivable attribute that might affect the outcome of the attack
November 7, 2020
Any effect should be a separate process, e.g. fire.
If I have a glove that does melee as well as fire damage then the melee damage can stay on the attack vector, but the effect needs to have its own process.
The effect can see if it succeeds when the hit lands.
Effects need to listen for hits.
Do I need an abstract "effect" attack type, as well as the specific effect, e.g. "fire"? That way something could block "all effects" and/or simply block "fire".
