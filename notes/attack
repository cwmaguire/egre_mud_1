Attack

How Attacks Work:

Attacks wait for resources and then create effects. Effects are created from effect prototypes. The effects roll for hit and damage and then send out an "apply me". Objects that can be affected must listen for effects. Objects that can be effected can distinguish the type of effect. e.g. HP can take damage from 'fire' or 'blunt force'.
I'm pretty sure targets need to know what effect types to listen for.
gerlshmud_handler_effect_createcreate the child process that will roll the diegerlshmud_handler_effect_attackhandle affecting for a child (i.e. non-prototype) effect process

History:

August 25, 2021

Added "How Attacks Work" section based off of reading through the commits.
My spells need to create effects.
Do I need to have a list of prototypes for an attack? I don't think so: we should have multiple effectsD'oh! That's exactly what I'm trying to do.
I don't know why an attack has to know about it's effect: the effects listen for the attack from the attack. Does the attack need to listen to the effects?

February 19, 2021

Do I wait for the effect processes to be installed somewhere? Do I attach them immediately to the creator _and_ the target? Yes, I think so, then they always get events.Do I remove them from the creator once they are attached to the target? Hmm, I have to remove them from _everything_ once they're finished.

February 14, 2021

An attack could have an effect and child effects: e.g. a flaming sword could have the main affect (melee / cut / skewer) and also a burn effect. Both effects might be dependent on the same hit roll. _OR_ I could have the effect have two different results ... but I want each piece of logic to be done in a separate process. ... and really, the sword is the attack, the melee/cut/skewer is _one_ effect.

November 22, 2020

I've created two behaviours: gerlshmud_attack and gerlshmud_defence They'll be implemented by anything that can attack and defend. So far I have gerlshmud_melee_attack, gerlshmud_melee_defend, gerlshmud_armor_defend I'm not sure I need gerlshmud_melee_defend ... Oh, yes I will, in cases where a weapon can parry or something (Still need to figure out stamina usage for parrying)
I don't think I need to captureSelf, attack, Target, with, AttackVectoranymore. Well, I think I still need to know what an attack is with, even if I still have to watch for the effects later.
Hmmm, can a shield defend against a spell? If not, should the shield not bother listening to spell attacks, or listen for the effect and then use gerlshmud_defence_armor Could be a magic shield. BUT, that would be an attribute or effect on the shield, not the shield itself Well, it could be from a magic-immune or magic-absorbing metal; it doesn't have to be from an enchantment So, the shield itself should decide if it can defend against attack types ... ... which means I need to know attack types OR, should I not worry about spells _hitting_ and just worry about spell effects? ... or both? I think both. This will be the most complicated MUD ever. Almost like coding from scratch.

November 9, 2020

 I've created attack and defend behaviours and implementations that simply say whether an attack vector (e.g. spell or fist) can attack or defend. This way every attack can simply create one or more effects: it doesn't matter if it's a spell or a wet noodle, it's handled the same. However, I need a way to specialize some logic, such as "can this vector attack?" Also, the designer can provide their own modules for whether something can attack or defend. Well, I guess at that point they'd more be a modder than a designer. I'll probably try and provide all the base cases for designers.
 I'm in the middle of combining spell and "vector" attacks into one module.

July 2, 2017

 Yup, the idea from January 27, 2017 is what I ended up implementing.
 Each attack vector creates a reservation for each resource that it needs. Those resource processes accumulate that resource and send it out to the next reserving process in line. Processes that get allocated their resources go to the back of the line.

January 27, 2017

 Have one attack process per vector?
 Each attack process submits a hold on a whatever resources it needs. When those holds are filled then the next attack process needing that resource will start to be filled.
 Example: Player P attacking Enemy E. Attack with fist is A-F. Attack with spell is A-Sp. A-F registers a hold on 5 stamina. A-Sp registers two holds: 1 stamina and 5 mana. 1 stamina is regen’d A-F gets the stamina 1 mana is regen’d A-Sp gets the mana … A-Sp gets all the mana it needs and waits for stamina A-F gets all the stamina it needs and completes an attack A-Sp will now get stamina.
 So I’ll have a resource process that has a list of attack process with holds on that resources and the holds are filled in order.

November 23, 2016

 1) grab attack vectors 2) order attack vectors 3) figure out all resources 4) grab resources 5) apply resources 6) kick off all attacks that have resources?
 How do I get them back?

November 21, 2016

Okay, I think I have a strategy for distributing resources (e.g. stamina, mana, electricity) to attack vectors: a scheduler process will continually reserve resources until it has enough to feed any attack. Reserved resources are distributed in LRU order.
The resource processes will reserve amounts for attack schedulers and claw them back if the attack process dies.
If Attack A has vectors Sword S and Spell SpS takes 3 StaminaSp takes 1 Stamina and 5 ManaStamina regens itselfThenA will reserve up to 4 stamina and 5 mana
If A manages to get at least 3 stamina then S will attackIf A manages to get at least 4 stamina and 5 mana then Sp will attack
Otherwise, if A gets less than 3 stamina then nothing attacks, even if it gets 5 mana, since S has to attack first
When S succeeds (i.e. S is deemed legal to resolve) then Stamina will clear out the 3 reserved stamina
Once S succeeds, then all newly reserved resources go to Sp first until it can legally be resolved.
So the attack scheduler continually reserves resources and doles them out to attack ... (vectors is the wrong word I think)

November 13, 2016

 Okay, here’s a scenario ... it's in SketchBook and basically just shows that I need to figure out which attacks should go first.
 I could send out an attack event with a weapon and all the relevant processes could tell me if there's enough resources to attack with that weapon.
 If not then I could either continually cycling through weapons, or I could wait for an update to a resource and try again.
 Resources are going to have update cycles. Perhaps an update cycle will be every second. e.g. stamina will regen at X/sec.
 Perhaps the attack process could wait until the latest ticks from all resources show that a weapon _should_ have enough resources to attack. Just because the last tick showed there was enough resources doesn't mean there is now.

November 12, 2016

 I’m a little lost on what’s going on in my multi_attack branch.
 In order to coordinate all attacks I’m going to have to have one main attack process.
 However, every item in the MUD has to be its own process. The attack coordinator could kick off events for specific attacks at specific times.
 Example:
 1 is the attack coordinator 2 is a sword 3 is a spell 4 is a player 5 is a zombie
 4 attacks 5 1 sees that kicks off a ‘register_attack’ event 2 and 3 respond to 1 and add themselves to the message Once this succeeds then 1 has a list of all attackers 1 somehow: knows which attack vector to kick off next …
 Each attack vector will know how it drains different character resources like focus, stamina, etc.
 The character will know how much of each resource it has.
 When an attack vector calc_attack flies by, the character can add how much it has of each resource and the attack vector can subtract how much of each resource it requires.
 If an attack vector doesn’t have enough of a resource then it can: - wait for that resource to be updated (possibly by an event)
 I like the idea of listening for events that tell us that we have enough resources to run the next attack
 The character quickly throws a punch The character builds up resources to cast a spell
 In the case of a character that can launch multiple attacks simultaneously, like a mech, we could search for the next attack that can execute concurrently while we wait for resources
 e.g. we have a laser that runs on electricity which is waiting and we have a gatling gun that runs on CPU for aiming. If we’re waiting for electricity we can still fire the gatling gun.
 So every time you get a resource update, allocate that resource to each attack vector in line until we find one that has everything it needs.
 e.g. if we have X next that needs 10 of A and 5 of B, Y after that that needs only 5 B, and we start with 0 A and 0 B and get an update of 10 B, then we start with A and allocate 5 of that to X, leaving 5. X doesn’t have enough A, so it doesn’t fire. The remaining 5 B gets allocated to Y. Y has enough to fire without preventing X from firing, so Y fires.
 e.g. A is 0, B is 0, X takes 10 A and 5 B, Y takes 5 B. An update comes in for 4 B. X takes all of it and none remains for Y. X still needs 10 A and 1 more B. Nothing fires.
 Once an attack fires it can go to the back of the line. This way we’ll keep firing off attacks in order so long as they have the appropriate resources.
 What to do with any excess resources?
 e.g. we have two attacks that both take resource A. We get 100 A but the two attacks only need 10 total.
 Also, when we get an update of what resources the character has, what do we do with what we have already.
 - go to the end of the line Expensive attacks would never fire
 example: punch takes 1 stamina throw takes 2 stamina if we keep adding one stamina every X units of time then punch will keep attacking but throw never will

July 25, 2016

 Kick off an attack survey message. Get all processes that will attack.
 Kick off an attack message with all things that can attack.
 Each process that can attack (sword, gun, spell, fist): - waits for enough stamina and concentration - waits until its full attack time has expired since the last attack e.g. if a spell takes three seconds then the spell process will wait three seconds before starting its attack event. - kicks off an attack - adds itself and/or the current time to the list of processes attacking ... here's where I'm stuck
 Do we just keep allowing that message to keep propagating? And then have the original attack process kick off another round? How do we know when we have all the process that will attack listed in the event? Or, how do we know if a process is the last process to add itself to the event. Or, when can we switch from finding processes that attack to looping over processes that attack.
 Once we've collected the whole list how do we pass to the process that hasn't attacked in the longest amount of time? If we kicked off a new attack with the same list then it could respond first. And then kick off a new event?
 Could we somehow collect all the pids ... no, if a process dies we don't want to try and send it directly to the PID.

July 24, 2016

 I’ve got several properties being set on child properties when an item is moved: - set character when character gets an item (e_h_char_inv) - set body_part when body part gets an item (e_h_body_part_inv) - set top_item when an item gets a child item (e_h_item_inv)
 In e_h_attribute_attack I can now check if the attribute is interested in the attack based on: - Owner is attacker or defender (character attributes) - Character is attacker or defender (item attributes, sub-item attributes) - Body part is attacking weapon (body part attributes) - Item has body_part (item wielded or worn attributes)
 I don’t know where I’m at now. I think I need to get back to working on each attack vector having it’s own attack.
 If a player attacks with a specific weapon should other attacks join in? No, the player’s choice of one or more weapons should trump what’s available.
 Perhaps I’ll add weapon sets: - hands and feet - fireball, cone of cold and sword - sword and feet
 So, send out “attack!” and have all the body parts, items and spells that can attack spin up attack processes.
 Unless the user specifies the weapons: attack squirrel with sword fireball Or a named set of attacks attack squirrel with 1 Or a sq 1

July 17, 2016

 Many things can affect an attack: - character attribute (skill, attribute, curse, blessing, effect, illness) - body_part attribute - item - item attribute - sub-item - sub-item attribute - room attribute, e.g. darkness, cold, heat, gravity, magnetism, atmosphere, wetness, etc.
 All of these things need to recognize when their Character is the source or target in an attack, except for room attributes.
 items, item attributes, sub-items, sub-item attributes, body parts and body part attributes also all need to know if they, or their top-level item is the weapon.
 So everything in a character needs to have a ‘character’ property.
 Items can either be the weapon, or their top-level item can be the weapon.

July 16, 2016

 Each process that can attack will have a cool-down property. When the attack process sends out ‘attack_now’ the each process that can attack will check its cool-down to see if it can attack again.
 Players will have an attack categories property so that they can set what categories of attacks they want to do.
 “attack with guns, fists, knives, spells"
 Granted, players will want to be more specific:
 “attack with 9mm, fists, bowie knife, fireball, bind"
 “attack with not 9mm” to remove something. or “no attack with 9mm"
 [{name, <<“9mm”>>}, {categories, [guns, projectiles, weapons, handheld]}] Or, instead of having to fill all that in I could have a tree that gets flattened. [{weapons, [{projectile, [{handheld, [{guns, []}]}]}]}
 Or I could have a category handler, but only if I need logic to change categories based on some criteria.
 For now I think I’ll stick with very limited categories: [projectile, melee, shield, hand, foot, head]
 Attack currently sends out ‘calc_hit’ but that assumes only one thing is attacking.
 Really it needs to send out a general ‘attack’ and then each item should kick off an attack process. Yeah, I like that. When the player says “attack” each attacking item and body part will start up an attack process and start attacking the target. Each will have it’s own countdown.
 Item watches for attack by Character with matching attack type Character fills in attack types (set by player or preset for MOB) Update stamina Update alertness Update Focus Item adds stamina, alertness and focus costs to attack so Character can deplete them

July 14, 2016

 How to limit attacks. I think I’ll just have an attack tick and have the player set up whatever attacks they want to active.

July 13, 2016

 Ah, I'm going to need an "X attack Y with W" That way attributes can affect different types of attack differently
 Items will need to know that they’re wielded.
 This attack crap is getting complicated.
 All body part items are worn or wielded. Each item has it’s own attack and defence hit and damage modifiers so it doesn’t matter whether they are worn or wielded. A classic example is holding a helmet: you don’t _need_ to hold a helmet unless you’re using it as a weapon. I suppose I should allow it, eventually. At that point items _would_ need to know if they were worn (i.e. properly) or wielded.
 So, if all the body parts add their child items to the attack then when to_hit comes around all the items will know if they are wielded/worn. Attributes will also know what is wielded and worn, and if they only affect w/w items that are worn then that situation is covered.
 That shouldn’t be too hard.
 Attributes will have to dig through the list of w/w items though; they won’t just be able to pattern match at the function clause level.
 Crap. Sub-sub-items and sub-item attributes (i.e. processes more than 1 level below the w/w item) won’t know that their parent item is w/w.
 I may need to set a ‘wielded’ property just like I set the character property.

July 12, 2016

 There is no global time. Each object will have it's own time.
 This means each attack will attack on it's own schedule. Not necessarily.
 If the attack sends out an 'attack' command on a regular basis then any attack vector could kick off their own attack on the success of that message.
 Each vector would track whether it is able to attack. check cool down check for ammo check if wielded check if submerged in water whatever
 How to check if wielded? Set {wielded_by, BodyPartPid, BodyPartType} on wield?
 Oooh, each attack would drain stamina too.
 The stamina process can regen on it's own schedule.
 Could have a "focus" attribute as well: the more attacks you do the less focus you have. Focus could affect 'calc_hit'
 Should weapons auto-reload?

July 11, 2016

 Should attack spells be autonomous, or be triggered by an attack process? What if a spell has a ten second cooldown? Should the user trigger the spell, which might then trigger an attack? Would the attack, potentially doing sword thrusts, laser blasts or arrows, mess up the spells being cast?
 Currently attack simply calls out "calc_hit" and "calc_damage". What I may have to do is set up multiple attacks: one for each attack vector. Sword attack, shield bash attack, spell attack, kick attack, psi attack, etc. How do we prioritize and interleave them?
 Experiment: I have a player with a gun, bow and arrow, sword, grenade, punch, kick, fire spell and psionic mind attack. What would that look like? I'm guessing it would be one attack at a time.
 I am a robot with a guided missile system, a laser auto-turret, a gattling gun, a grenade launcher, a fiery forcefield and a spiked fist. This could have multiple attacks at a time.
 One at a time attacks could sense other attacks and reset their timers: but then the fastest attacks would always happen and the slower attacks would not.
 One at a time attacks could be prioritized: Each attack would accumulate a cost: the lowest cost attack would fire next.
 A user could be limited by how many attacks they can perform per time X.
 Given a priority and an attack rate a pattern of attacks could be generated: At three attacks per X and priorities of [{gun, 5}, {punch 2}] we would do: ... That makes no sense. Why not just choose: gun, gun, gun, gun, gun ... There would need to be some sort of profile set up for attacks by the user:
 [gun, [sword, bow], [psionic, spell] that is: gun, sword, psi, gun, bow, spell, ... or some randomization or something.
 _OR_ the user could type specific "special" attacks "+sword" / "attack with sword" / 1 (i.e. hotbar 1)
 _AND/OR_ the user could update the attacks: -gun, +sword (or something) 1x2,2x5 ... i.e. do attack 1 twice then to attack 2 five times.
 I could still work out an attack cost. A cool down. A shotgun will have a slightly longer cool down than a pistol.
 Maybe stamina? Attacks slow down as stamina goes down (except for pistols maybe)
 Robots might have batteries that have to charge.

July 5, 2015

 Maybe have the behaviour that kicks off counterattacks track what attacks are already in progress.

July 4, 2015

 Counterattack - someone attacks a zombie and the zombie attacks back. What if the zombie is already attacking something? We could have the zombie decide who to attack but for now I think the zombie should just keep attacking whatever it’s already attacking.
 How do we know if the zombie is already attacking something? We can send out {attack, self(), Target} but how do we tell if that's a counterattack or a spontaneous attack?
 I can probably come up with something where a particular combo of source and target values means “counterattack” but that seems goofy.
 Maybe an attack manager?

June 19, 2015

 We attempt a hit and it succeeds Then we attempt to calculate damage and that succeeds Now what? Attempt to apply damage?
 Attack: "Hey everyone, did the attack with the sword hit?" Everyone: "Yup" Attack: "Great, how much damage did we get?" Everyone: "Three points!" Attack: "Terrific, can we apply that damage?" Everyone: "Yes" Target: "Ouch."

June 18, 2015

 Attack as process
 Fight?
 e.g. p1 -> p1f -> f <- m1f <- m1
 where p = player, m = mob f = fight
 or p -> pf \ \ mf <- m
 Where player has "player fight" attacking mob and mob has "mob fighter" attacking player
 "fighter" processes would need to make sure they checked range before succeeding.
 Maybe "packets" should have a TTL so they can go beyond 1 room?
 An attack must be self sufficient: - chance to hit - damage calculation -
 Attack story - I approach the venomous snake with my sword drawn - The snake darts and me and I dodge to the side countering with a sword stroke - why does the snake strike - how often does it strike - what are the factors that determine if it bites me - The snake lunges at me and manages to bite my arm but it doesn’t pierce my armor - how would the snake know that I have armor?
 Testing How would I test this? What needs to happen? An attack process needs to start The attack needs to send out a message to attack something
 The attack could send out base values and each process that heard the message could modify the values. The attack process could just send a message to the player telling the player to attack. “hey player, attack!" How would the attack know when to stop? If the player moved or the target moved then the attack would hear about it.
 Multiple parallel attacks: e.g. two swords, punching &amp; kicking When the player or AI attacks they start an attack for each “wielded” weapon. The player/AI can choose which “weapons" are wielded at any time.
 I’m thinking of a {wielded, [Sword, Fist, SpikedBoot]} type property for weapons. Each will have an attack speed and the user could even prioritize them with ratios.
 e.g. {wielded, [{Sword, 3}, {LeftFist, 1}]} For every three Sword attacks there would be 1 attack with the left fist.
 Not sure if I would just have a sequence run by one attack process, or have multiple attack processes with some complicated timing.
 In the limited “swords and fists” situation we probably wouldn’t have parellel attacks but as soon as you get into ships, robots, spells, familiars, etc. then you could quite easily have a hundred different things attacking.
 The problem with calculating … well, we could just … no, we don't know how long each thing will take to attack until it’s finished it’s attack (I don’t think). We could adjust the timing as we go: the LeftFist doesn’t attack until the Sword has had three times as many attacks. Yeah, that seems reasonable.

